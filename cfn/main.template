AWSTemplateFormatVersion: 2010-09-09
Description: "AWS G4 Gaming Box NiceDcv server with Parsec"
Transform: AWS::Serverless-2016-10-31
Metadata:
  Version: 0.0.1

Parameters:
  GamingBoxInstanceType:
    Type: String
    Description: Gaming box instance type.
    AllowedValues:
      - g4dn.xlarge
      - g4dn.2xlarge
      - g4dn.4xlarge
      - g4dn.8xlarge
      - g4dn.12xlarge
      - g4dn.16xlarge
    Default: g4dn.xlarge

  GamingBoxVolumeSize:
    Type: String
    Default: 512

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Keypair for the instance

  OnPremIp:
    Type: String
    Description: CIDR block of an on-premise IP address
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 0.0.0.0/0

  ResourceTags:
    Type: String
    Description: Tag resources, which can help you identify and categorize them. For example project or application name e.g. MyAwesomeApp.
    Default: 'GamingBox'

Mappings:
  AMIRegionMap:
    eu-north-1:
      NICEDCV: ami-0229c06b2e8dde196

    ap-south-1:
      NICEDCV: ami-00c63aed4bb7051c1

    eu-west-3:
      NICEDCV: ami-08db56d7906c756f7

    eu-west-2:
      NICEDCV: ami-06052cc19d17248a5

    eu-west-1:
      NICEDCV: ami-0e53bea781f755cb9

    ap-northeast-2:
      NICEDCV: ami-0e6d692f39c0093a8

    ap-northeast-1:
      NICEDCV: ami-00fab56ff4b6a09a3

    ap-southeast-1:
      NICEDCV: ami-0b2b15806a49b8cbc

    ap-southeast-2:
      NICEDCV: ami-01557b04f1df6a3cb

    eu-central-1:
      NICEDCV: ami-02b7125842f81a87f

    us-east-1:
      NICEDCV: ami-04778e52247887e77

    us-east-2:
      NICEDCV: ami-08e4ec8ee36382d64

    us-west-1:
      NICEDCV: ami-0283d57a447aca855

    us-west-2:
      NICEDCV: ami-0243655613bd4e173

Resources:
  # --> Assets Configuration <--#
  AssetsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ResourceTags

  LambdaUploadAssetsToS3:
    Type: AWS::Serverless::Function
    Properties:
      Handler: uploader.handler
      Runtime: python3.8
      CodeUri: ../src/uploader/
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref AssetsS3Bucket
      Tags:
        Name: !Ref ResourceTags

  LambdaTriggerUploadAssetsToS3:
    Type: Custom::LambdaTrigger
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt LambdaUploadAssetsToS3.Arn
      AssetsS3Bucket: !Ref AssetsS3Bucket
      Build: 1.0

  # --> GamingBox access configuration <-- #
  GamingBoxInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref GamingBoxRole

  GamingBoxRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: tag-instance
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:CreateTags
                Resource: '*'
        - PolicyName: nice-dcv-license
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::dcv-license.${AWS::Region}/*'
        - PolicyName: ec2-windows-nvidia-drivers
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${AssetsS3Bucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: 'arn:aws:s3:::ec2-windows-nvidia-drivers'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 'arn:aws:s3:::ec2-windows-nvidia-drivers/*'

  GamingBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DL Workstation instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref OnPremIp
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref OnPremIp
      Tags:
        - Key: Name
          Value: !Ref ResourceTags

  GamingBoxLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref GamingBoxRole
          buckets:
            - !Ref AssetsS3Bucket
      AWS::CloudFormation::Init:
        config:
          files:
            C:\cfn\scripts\install-packages.ps1:
              source: !Sub 'https://${AssetsS3Bucket}.s3.${AWS::Region}.${AWS::URLSuffix}/install-packages.ps1'
              authentication: S3AccessCreds
            C:\cfn\scripts\install-gpu-drivers.ps1:
              source: !Sub 'https://${AssetsS3Bucket}.s3.${AWS::Region}.${AWS::URLSuffix}/install-gpu-drivers.ps1'
              authentication: S3AccessCreds
            C:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            C:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.GamingBoxLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v --stack ${AWS::StackId} --resource GamingBoxLaunchTemplate --region ${AWS::Region}
          commands:
            01-install-packages:
              command: 'powershell.exe -ExecutionPolicy Unrestricted C:\cfn\scripts\install-packages.ps1 -Verbose'
              waitAfterCompletion: 0
            05-install-gpu-drivers:
              command: 'powershell.exe -ExecutionPolicy Unrestricted C:\cfn\scripts\install-gpu-drivers.ps1 -Verbose'
              waitAfterCompletion: 0
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - 'c:\\cfn\\cfn-hup.conf'
                  - 'c:\\cfn\\hooks.d\\cfn-auto-reloader.conf'
                audiosrv:
                  enabled: true
                  ensureRunning: true
                amazon-ssm-agent:
                  enabled: true
                  ensureRunning: true
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              DeleteOnTermination: False
              VolumeSize: !Ref GamingBoxVolumeSize
              VolumeType: gp2
        ImageId: !FindInMap [AMIRegionMap, !Ref 'AWS::Region', NICEDCV]
        IamInstanceProfile:
          Name: !Ref GamingBoxInstanceProfile
        InstanceType: !Ref GamingBoxInstanceType
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            InstanceInterruptionBehavior: terminate
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !GetAtt GamingBoxSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref ResourceTags
              - Key: SnapAndDelete
                Value: 'True'
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Ref ResourceTags
              - Key: SnapAndDelete
                Value: 'True'
        UserData:
          Fn::Base64: !Sub |
            <script>
            cfn-init.exe -v --stack ${AWS::StackName} --resource GamingBoxLaunchTemplate --region ${AWS::Region}
            cfn-signal.exe -e %errorlevel% --stack ${AWS::StackName} --resource GamingBoxInstance --region ${AWS::Region}
            </script>

  GamingBoxInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref GamingBoxLaunchTemplate
        Version: '1'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: 'PT15M'

#   --> Lambda SnapShotter Configuration <-- #
  SnapShotterFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Create and delete snapshots"
      CodeUri: snapshotter/
      Handler: app.lambda_handler
      Runtime: python3.7
      Timeout: 900
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:*
              Resource: '*'
      Environment:
        Variables:
          GAMING_INSTANCE_NAME: !Sub ${AWS::StackName}
          GAMING_INSTANCE_REGION: !Sub ${AWS::Region}
          GAMING_INSTANCE_SIZE_GB: !Ref GamingBoxVolumeSize

  # --> Events Rule to trigger Lambda on instance termination <-- #
  SnapShotterEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Events Rule to trigger Lambda on instance termination"
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - terminated
      State: ENABLED
      Targets:
        - Id: SnapShotterEventsRule
          Arn: !GetAtt SnapShotterFunction.Arn

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SnapShotterFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SnapShotterEventsRule.Arn

Outputs:
  AssetsS3Bucket:
    Value: !Ref AssetsS3Bucket

  GamingBoxPublicIp:
    Value: !GetAtt GamingBoxInstance.PublicIp

  GamingInstanceName:
    Description: GAMING_INSTANCE_NAME
    Value: !Sub ${AWS::StackName}

  GamingBoxLaunchTemplate:
    Description: LAUNCH_TEMPLATE
    Value: !Ref GamingBoxLaunchTemplate
